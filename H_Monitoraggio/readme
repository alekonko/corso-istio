#script installazione automatico
curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.25.1 sh -
export PATH="$PATH:/root/istio-1.25.1/bin"
istioctl install --set profile=demo -y
kubectl label namespace default istio-injection=enabled

kubectl apply -f /root/istio-1.25.1/samples/addons/prometheus.yaml
kubectl apply -f /root/istio-1.25.1/samples/addons/grafana.yaml
kubectl apply -f /root/istio-1.25.1/samples/addons/kiali.yaml
kubectl apply -f /root/istio-1.25.1/samples/addons/jaeger.yaml


#creiamo una applicazione
kubectl apply -f ../3_canary_release/1_setupenv.yaml
kubectl apply -f ../3_canary_release/2_canary_release.yaml
kubectl run nginx --image=nginx

kubectl exec -it nginx -- bash
for i in {1..10}; do curl -H "free-subscription: free" http://version-service/; echo; done;
for i in {1..10}; do curl -H "beta: tester" http://version-service/; echo; done;
for i in {1..10}; do curl http://version-service/; echo; done;


#andiamo su kiali e vediamo uin po la dashboard
kubectl port-forward --address 0.0.0.0 -n istio-system services/kiali 20001:20001

#creiamo un altra applicazione
kubectl label namespace default istio-injection=enabled
kubectl apply -f /root/istio-1.25.1/samples/bookinfo/networking/virtual-service-all-v1.yaml
kubectl apply -f /root/istio-1.25.1/samples/bookinfo/networking/bookinfo-gateway.yaml
kubectl apply -f /root/istio-1.25.1/samples/bookinfo/networking/destination-rule-all.yaml
kubectl apply -f /root/istio-1.25.1/samples/bookinfo/platform/kube/bookinfo.yaml
kubectl wait deploy --all --for condition=available --timeout=400s

kubectl port-forward svc/productpage --address 0.0.0.0 9080:9080
#facciamo dei giri sulla pagina productpage per i due user configurati

#aggiungiamo la v1 al 70% e la v2 all'30% e la v3 al 10% (la destinationrule dovrebbe essere gia' con le 3 versioni)
kubectl edit virtualservices reviews

  - route:
    - destination:
        host: reviews
        subset: v1
      weight: 70
    - destination:
        host: reviews
        subset: v2
      weight: 30
    - destination:
        host: reviews
        subset: v3
      weight: 10

#browsiamo la productpage
#torniamo su kiali e vediamo il traffic distribution

#creiamo un pod su namespace noinjection e facciamo chiamate verso la productpage
kubectl create ns noinjection
kubectl run tester --image=nginx -n noinjection 
kubectl exec -it tester -n noinjection -- bash
curl -I http://productpage.default:9080/productpage

#torniamo su kiali e abilitiamo il display security
#tutte le connessioni hanno il lucchetto mTLS tranne quest'ultima (l'mtls non e stato messo a strict)

#lo configuro
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: cluster-wide-mtls
  namespace: istio-system
spec:
  mtls:
    mode: STRICT

#ora le chiamate mi falliranno dal pod su noinjection

#vediamo del traffico dal ingressgateway
kubectl port-forward -n istio-system --address 0.0.0.0 service/istio-ingressgateway 1234:80
#poi accedere dalla console alla 1234 ma su /productpage
#refreshare un po la pagina e tornare nella dashboard di kiali

GRAFANA
kubectl port-forward --address 0.0.0.0 -n istio-system services/grafana 3000:3000

JAEGER
kubectl port-forward --address 0.0.0.0 -n istio-system svc/tracing 80:80




